from handlers.users.messages import get_all_locales
from aiogram.dispatcher import FSMContext
from payeer_api import PayeerAPIException
from keyboards.default.keyboards import *
from keyboards.inline.keyboards import *
from loader import dp, _, payeer, bot
from aiogram.types import ParseMode
from states.states import *
from data.models import *
from data.config import *
import requests
import hashlib
import json
import re


async def notify_admins_about_error(message, system, error_text):
    await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ"),
                         reply_markup=main_keyboard())
    for id_a in admins:
        await bot.send_message(id_a, _("#error\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ @{}. –°–∏—Å—Ç–µ–º–∞ {}.–û–ø–∏—Å–∞–Ω–∏–µ: {}").
                               format(BOT_ALIAS, system, error_text))


@dp.message_handler(state=Language.NewLanguage)
async def language_setup(message: types.Message, state: FSMContext):
    if message.text not in LANGUAGE_DICT.keys():
        await message.answer(_("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø—Ü–∏–∏"))
        return
    await User.filter(user_id=message.chat.id).update(language=LANGUAGE_DICT[message.text])
    await message.answer(_("–Ø–∑—ã–∫ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω", locale=LANGUAGE_DICT[message.text]),
                         reply_markup=main_keyboard(locale=LANGUAGE_DICT[message.text]))
    await state.finish()


@dp.message_handler(state=Money.PutGet)
async def select_action(message: types.Message, state: FSMContext):
    if message.text in get_all_locales("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç üí≥"):
        await message.answer(_("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:"), reply_markup=pay_options())
        await state.finish()
    elif message.text in get_all_locales("–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ üí∞"):
        await message.answer(_("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:"), reply_markup=get_money())

        await state.finish()
        await GetMoney.next()
    else:
        await message.answer(_("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø—Ü–∏–∏"))


@dp.message_handler(state=GetMoney.System)
async def select_amount(message: types.message, state: FSMContext):
    if message.text in ["Fkwallet", "Payeer"]:
        async with state.proxy() as data:
            data['system'] = message.text.lower()
        user = await User.get_or_none(user_id=message.chat.id)
        await message.answer(_("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {min_out} —Ä—É–±–ª–µ–π\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {money} —Ä—É–±–ª–µ–π.\n–í–≤–µ–¥–∏—Ç–µ "
                               "—Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:\n\n(–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª–∑–æ–≤–∞—Ç—å /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏)").
                             format(min_out=MIN_MONEY_OUT, money=(user.income + user.money)),
                             reply_markup=types.ReplyKeyboardRemove())
        await GetMoney.next()
    else:
        await message.answer(_("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø—Ü–∏–∏"))


@dp.message_handler(state=GetMoney.Amount)
async def select_amount(message: types.message, state: FSMContext):
    if re.fullmatch(r"[+-]?([0-9]*[.])?[0-9]+", message.text):
        user = await User.get_or_none(user_id=message.chat.id)
        if float(message.text) > user.money + user.income:
            await message.answer(_("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ {money} —Ä—É–±–ª–µ–π").format(money=(user.money + user.income)))
            return
        if float(message.text) < MIN_MONEY_OUT:
            await message.answer(_("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–∑ –±–æ—Ç–∞ {} —Ä—É–±–ª–µ–π").format(MIN_MONEY_OUT))
            return
        async with state.proxy() as data:
            data['amount'] = float(message.text)
            await message.answer(_("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ {sys} –∫–æ—à–µ–ª—å–∫–∞").format(sys=data['system']))
        await GetMoney.next()
    else:
        await message.answer(_("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"))


@dp.message_handler(state=GetMoney.WalletNumber)
async def select_wallet(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if (re.fullmatch(r"P[a-zA-Z0-9]{7,12}", message.text) and data['system'] == "payeer") or \
                (re.fullmatch(r"F[0-9]{6,15}", message.text) and data['system'] == 'fkwallet'):
            data['wallet_code'] = message.text
            await message.answer(
                _("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã—Å–ª–∞—Ç—å {money} —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {wallet}?\n\n–ù–∞–ø–∏—à–∏—Ç–µ \"–¥–∞\" "
                  "—á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.").format(money=data['amount'], wallet=message.text),
                reply_markup=confirm_keyboard())
            await GetMoney.next()
        else:
            await message.answer(_("–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è Payeer –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å P –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 7-12 —Ü–∏—Ñ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä P1000000\n"
                                   "–ù–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ Fkwallet –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å F –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã. –ù–∞–ø—Ä–∏–º–µ—Ä F100000000"))


@dp.message_handler(state=GetMoney.Finish)
async def finish_check(message: types.Message, state: FSMContext):
    await GetMoney.next()
    if message.text in get_all_locales("–¥–∞"):
        async with state.proxy() as data:
            if data['system'] == "fkwallet":
                if data['wallet_code'] == FKWALLET_WALLET_CODE:
                    await message.answer(_("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ"),
                                         reply_markup=main_keyboard())
                    return
                sign_str = FKWALLET_WALLET_CODE + str(data['amount']) + str(data['wallet_code']) + FKWALLET_API_KEY
                sign = hashlib.md5(sign_str.encode()).hexdigest()
                data_req = {"wallet_id": FKWALLET_WALLET_CODE, "purse": str(data['wallet_code']),
                        "amount": str(data['amount']), "sign": sign, "action": "transfer"}
                res_str = requests.post("https://www.fkwallet.ru/api_v1.php", data=data_req)
                res = json.loads(res_str.text)
                if "desc" not in res.keys():
                    await notify_admins_about_error(message, 'fkwallet', f"Responce starts with: "
                                                             f"{res_str.text[:max(len(res_str.text) - 1, 100):]}")
                    await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ"))
                    return
                if res['desc'] != "Payment send":
                    await notify_admins_about_error(message, 'fkwallet', f"Responce starts with: "
                                                             f"{res_str.text[:max(len(res_str.text) - 1, 100):]}")
                    await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ"))
                    return
            elif data['system'] == 'payeer':
                try:
                    res = payeer.transfer(data['amount'], data["wallet_code"], "RUB", "RUB",
                                          comment=str(message.chat.id))
                except PayeerAPIException as error:
                    if str(repr(error)) == "PayeerAPIException(['transferHimselfForbidden'])":
                        await message.answer(_("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ"),
                                             reply_markup=main_keyboard())
                        return
                    else:
                        await notify_admins_about_error(message, 'payeer', str(repr(error)))
                        await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ"))
                        return
            await Transaction(paying_sys_id=200, user_id=message.chat.id, rub_amount=data['amount'],
                              bot_pay=True, system=data['system'], wallet_number=data['wallet_code']).save()
            # code 200 means it's from bot
            user = await User.get_or_none(user_id=message.chat.id)
            if user.income >= float(data['amount']):
                income = user.income - float(data['amount'])
                money = user.money
            else:
                income = 0
                amount = float(data['amount']) - user.income
                money = user.money - amount
            await User.filter(user_id=message.chat.id).update(income=income, money=money)
            config = await User.get(user_id=1000)
            await User.filter(user_id=1000).update(income=(config.income + float(data['amount'])))
            await message.answer(_("–û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"),
                                 reply_markup=main_keyboard())
            await state.finish()
    else:
        await message.answer(_("–ù–∞–ø–∏—à–∏—Ç–µ \"–¥–∞\" —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"))


@dp.message_handler(state=PutMoney.Amount)
async def select_wallet(message: types.Message, state: FSMContext):
    if re.fullmatch(r"[0-9]+(\.[0-9]+)?", message.text):
        exist = await CurrentTrans.get_or_none(amount=float(message.text))
        if exist is not None:
            await message.answer(_("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–º–µ–Ω—è–π—Ç–µ —Å—É–º–º—É(–º–æ–∂–Ω–æ –Ω–∞ —Ä—É–±–ª—å). –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {t} –º–∏–Ω—É—Ç").
                                 format(t=TTL_TRANSACTION))
            return
        async with state.proxy() as data:
            data['amount'] = message.text
            await message.answer(_("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –Ω–∞ {amount} —Ä—É–±–ª–µ–π?").format(amount=data['amount']),
                                 reply_markup=confirm_keyboard())
            await PutMoney.next()
    else:
        await message.answer(_("–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É"))


@dp.message_handler(state=PutMoney.Finish)
async def select_wallet(message: types.Message, state: FSMContext):
    if message.text in get_all_locales("–¥–∞"):
        async with state.proxy() as data:
            amount = data['amount'].replace(".", "\.")
            await message.answer(
                _("üí∞*–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Fkwallet:* `{"
                  "wallet}`\n–ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –¢–û–õ–¨–ö–û *—Ä—É–±–ª–µ–≤—ã–º* —Å—á–µ—Ç–æ–º\. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ {ttl} "
                  "–º–∏–Ω—É—Ç\. –ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É —Å–∫–æ–ª—å–∫–æ "
                  "—Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ {ttl} –º–∏–Ω—É—Ç\. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–∏–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º "
                  "–ø–∏—à–∏—Ç–µ @VPankoff\.–í —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à —Å—á–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è\.\n"
                  "https://www\.fkwallet\.ru/ "
                  ).format(amount=amount, wallet=FKWALLET_WALLET_CODE, ttl=TTL_TRANSACTION),
                parse_mode=ParseMode.MARKDOWN_V2, reply_markup=main_keyboard())
            await CurrentTrans(user_id=message.chat.id, amount=float(data['amount'])).save()
            await PutMoney.next()
    else:
        await message.answer(_("–ù–∞–ø–∏—à–∏—Ç–µ \"–¥–∞\" —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"))


@dp.message_handler(state=SetPercent.Finish)
async def finish_check(message: types.Message, state: FSMContext):
    if re.fullmatch(r"[0-9]+(\.[0-9]+)?", message.text):
        await User.filter(user_id=1001).update(money=1 + float(message.text))
        await message.answer("–ì–æ—Ç–æ–≤–æ", reply_markup=main_keyboard())
        await state.finish()
    else:
        await message.answer(_("–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É"))